{"version":3,"sources":["Infobox.js","LineGraph.js","Table.js","util.js","App.js","serviceWorker.js","index.js","main.png"],"names":["Infobox","title","cases","total","Card","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","praser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","sortData","sort","b","App","Setcountries","setcountry","countryInfo","setcountryInfo","tableData","setTableData","onCountryChange","event","countrycode","target","url","name","iso2","sortedData","getCountriesData","FormControl","Select","onChange","varient","MenuItem","src","logo","alt","todayCases","todayRecovered","recovered","todayDeaths","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.da14057f.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction Infobox({ title, cases, total }) {\r\n  return (\r\n    <>\r\n      <Card className=\"infobox\">\r\n        <CardContent>\r\n          <Typography className=\"infobox__title\" color=\"textSecondary\">\r\n            {title}\r\n          </Typography>\r\n          <h2 className=\"infobox__cases\" >{cases}</h2>\r\n          <Typography className=\"infobox__total\" color=\"textSecondary\">\r\n          <p>  {total}  Total </p>\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Infobox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          praser: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\" }) {\r\n  const [data, setData] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{cases}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\"\r\nimport {Circle, Popup} from \"react-leaflet\";\r\n// export const sortData = (data) => {\r\n//   const sortedData = [...data];\r\n\r\n//   sortedData.sort((a, b) => {\r\n//     if (a.cases > b.cases) {\r\n//       return -1;\r\n//     } else {\r\n//       return 1;\r\n//     }\r\n//   });\r\n//   return sortedData;\r\n// };\r\n\r\nconst casesTypeColors = {\r\n  cases:{\r\n    hex:\"#cc1034\",\r\n    multiplier:800,\r\n  },\r\n  recovered:{\r\n    hex:\"#7dd71d\",\r\n    multiplier:1200,\r\n  },\r\n  deaths:{\r\n    hex:\"#fb4443\",\r\n    multiplier:2000,\r\n  }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") => \r\n data.map=((country) => (\r\n <Circle \r\n center={[country.countryInfo.lat, country.countryInfo.long]}\r\n fillOpacity={0.4}\r\n color={casesTypeColors[casesType].hex}\r\n fillcolor={casesTypeColors[casesType].hex}\r\n radius={\r\n   Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n }\r\n  >\r\n<Popup>\r\n  <h1>asdas</h1>\r\n</Popup>\r\n </Circle>\r\n  )\r\n  );\r\n","import {\n  FormControl,\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Infobox from \"./Infobox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util.js\";\nimport logo from \"../src/main.png\"\n\n\nfunction App() {\n  const [countries, Setcountries] = useState([]);\n  const [country, setcountry] = useState(\"worldwide\");\n  const [countryInfo, setcountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n\n  const onCountryChange = async (event) => {\n    const countrycode = event.target.value;\n\n    const url =\n      countrycode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countrycode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setcountryInfo(data);\n        setcountry(countrycode);\n      \nconsole.log( data.countryInfo);\n    \n    \n      });\n   \n  };\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setcountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2, //uk, us , india\n          }));\n          const sortedData = sortData(data);\n          Setcountries(countries);\n          setTableData(sortedData);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"app\">\n        <div className=\"design\"></div>\n        <div className=\"design2\"></div>\n        <div className=\"design3\"></div>\n    \n    \n      <div className=\"appDesign\">\n        <div className=\"app__left\">\n        <div className=\"design4\"></div>\n        <div className=\"design5\"></div>\n        <div className=\"design6\"></div>\n          <div className=\"app__header\">\n            <h1>COVID-19 Tracker</h1>\n            <FormControl className=\"app__dropdown\">\n              <Select\n                onChange={onCountryChange}\n                varient=\"outlined\"\n                value={country}\n              >\n                {/*Loop Through all the country*/}\n                <MenuItem  value=\"worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n\n                {/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem> */}\n              </Select>\n            </FormControl>\n          </div>\n          <div className=\"main_container\">\n<div className=\"empty\"> \n<div className=\"button\">\n  <button className=\"but\">Get Well Soon Earth!</button>\n</div>\n<div className=\"headings\">\n  <h1>Let's Stop <br/> The COVID And, <br/> <span className=\"change\"> Recover The Earth ! </span></h1>\n</div>\n<div className=\"content\">\n  <p>Due to covid outbreak the earth is grieve and we can stop it by follow some simple steps</p>\n</div>\n<div className=\"button_container\">\n     <button className=\"but1\">Know More</button>\n     <button className=\"but2\">Watch Video</button>\n   </div>\n</div>\n<div className=\"imgg\">\n  <img className=\"img_main\" src= {logo} alt=\"mainImage\" />\n   </div>\n   \n</div>\n\n          <div className=\"app__stats\">\n            <Infobox\n              title=\"coronavirus Cases\"\n              cases={countryInfo.todayCases}\n              total={countryInfo.cases}\n            />\n            <Infobox\n              title=\"recoveres\"\n              cases={countryInfo.todayRecovered}\n              total={countryInfo.recovered}\n            />\n            <Infobox\n              title=\"Deaths\"\n              cases={countryInfo.todayDeaths}\n              total={countryInfo.deaths}\n            />\n            {/*InfoBoxes*/}\n            {/*InfoBoxes*/}\n            {/*InfoBoxes*/}\n          </div>\n\n          {/*Table*/}\n          {/*Graph*/}\n        \n        </div>\n\n        <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Countries</h3>\n            <Table countries={tableData} />\n            <h3 className=\"casess\">Worldwide new Cases</h3>\n            <LineGraph/>\n          </CardContent>\n        </Card>\n      </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n<React.StrictMode><App /></React.StrictMode>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/main.f5d4ea53.png\";"],"sourceRoot":""}